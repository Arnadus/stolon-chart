apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "stolon.keeper.fullname" . }}
  labels:
    app: {{ template "stolon.keeper.fullname" . }}
    release: "{{ .Release.Name }}"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    component: keeper
    heritage: "{{ .Release.Service }}"
spec:
  serviceName: {{ template "stolon.keeper.fullname" . }}
  replicas: {{ .Values.keeper.replicas }}
  template:
    metadata:
      labels:
        app: "stolon-keeper"
        release: "{{ .Release.Name }}"
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        component: keeper
        stolon-cluster: {{ template "stolon.clusterName" . }}
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
    spec:
      subdomain: stolon-keeper
      serviceAccountName: {{ template "stolon.serviceAccountName" . }}
      terminationGracePeriodSeconds: 10

{{- if .Values.keeper.affinity }}
      affinity:
{{ toYaml .Values.keeper.affinity | indent 8 }}
{{- end }}

{{- if .Values.keeper.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.keeper.nodeSelector | indent 8 }}
{{- end }}

{{- if .Values.keeper.tolerations }}
      tolerations:
{{ toYaml .Values.keeper.tolerations | indent 8 }}
{{- end }}
      containers:
      - name: {{ template "stolon.keeper.fullname" . }}
        image: "{{ .Values.image }}:{{ .Values.imageTag }}"
        imagePullPolicy: {{ default "" .Values.imagePullPolicy | quote }}
        lifecycle:
          postStart:
            exec:
              command:
                - /bin/sh
                - -c
                - chown -R stolon:stolon /home/stolon &&
                  chown  stolon:stolon {{ .Values.keeper.restore.path }}/{{ .Values.keeper.restore.file }} &&
                  chmod 700 /home/stolon &&
                  chown -R stolon:stolon /home/stolon/ &&
                  chmod -R 700 /home/stolon/ &&
                  chmod -R 600 /home/stolon/.ssh/* &&
                  /usr/sbin/sshd -e
        command:
          - "/bin/bash"
          - "-ec"
          - |
            # Generate our keeper uid using the pod index
            IFS='-' read -ra ADDR <<< "$(hostname)"
            export STKEEPER_UID="keeper_${NODE_NAME//./_}"
            export POD_IP=$(hostname -i)
            export STKEEPER_PG_LISTEN_ADDRESS=$POD_IP
            export STOLON_DATA=/stolon-data
            chown stolon:stolon $STOLON_DATA
            exec gosu stolon stolon-keeper --data-dir $STOLON_DATA
        env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: STKEEPER_CLUSTER_NAME
            value: {{ template "stolon.clusterName" . }}
          - name: STKEEPER_STORE_BACKEND
            value: {{ .Values.store.backend  | quote}}
          {{- if eq .Values.store.backend "kubernetes" }}
          - name: STKEEPER_KUBE_RESOURCE_KIND
            value: {{ default "configmap" .Values.store.kubeResourceKind  | quote}}
          {{- else }}
          - name: STKEEPER_STORE_ENDPOINTS
            value: {{ .Values.store.endpoints | quote}}
          {{- end }}
          - name: STKEEPER_PG_REPL_USERNAME
            value: {{ .Values.pgReplUsername  | quote}}
          - name: STKEEPER_PG_REPL_PASSWORDFILE
            value: "/etc/secrets/stolon/pg_repl_password"
          - name: STKEEPER_PG_SU_USERNAME
            value: {{ .Values.pgSuperuserName  | quote}}
          - name: STKEEPER_PG_SU_PASSWORDFILE
            value: "/etc/secrets/stolon/pg_su_password"
          - name: STKEEPER_DEBUG
            value: {{ .Values.debug | quote}}
          - name: STOLONCTL_STORE_BACKEND
            value: {{ .Values.store.backend | quote}}
          - name: STOLONCTL_STORE_ENDPOINTS
            value: {{ .Values.store.endpoints | quote}}
          - name: STOLONCTL_CLUSTER_NAME
            value: {{ include "stolon.clusterName" . | quote }}

          - name: PGHOST
            value: /tmp
          - name: PGUSER
            value: {{ .Values.pgSuperuserName  | quote}}
          - name: PGPASSWORD
            value: {{ .Values.pgSuperuserPassword  | quote}}

{{- if .Values.keeper.extraEnv }}
{{ toYaml .Values.keeper.extraEnv | indent 10 }}
{{- end }}


        ports:
          - containerPort: {{ .Values.ports.internalPort }}
        volumeMounts:

        {{- if eq .Values.role "standby"}}
        - name: passfile-secret
          mountPath: {{ .Values.standbyConfig.master.passfile.path }}/{{ .Values.standbyConfig.master.passfile.file }}
          subPath: {{ .Values.standbyConfig.master.passfile.file }}
        {{- end }}

        - name: stolon-data
          mountPath: /stolon-data
        - name: stolon-secrets
          mountPath: /etc/secrets/stolon
        - name: ssh-secrets
          mountPath: /root/.ssh/id_rsa
          subPath: id_rsa
        - name: ssh-secrets
          mountPath: /root/.ssh/id_rsa.pub
          subPath: id_rsa.pub
        - name: restore
          mountPath: {{ .Values.keeper.restore.path }}/{{ .Values.keeper.restore.file }}
          subPath: {{ .Values.keeper.restore.file }}
        - name: ssh-secrets
          mountPath: /home/stolon/.ssh/id_rsa
          subPath: id_rsa
        - name: ssh-secrets
          mountPath: /home/stolon/.ssh/id_rsa.pub
          subPath: id_rsa.pub
        - name: ssh-secrets
          mountPath: /home/stolon/.ssh/authorized_keys
          subPath: id_rsa.pub
        - name: config
          mountPath: {{ .Values.configFile.path }}
        resources:
{{ toYaml .Values.keeper.resources | indent 10 }}
      volumes:
        - name: stolon-secrets
          secret:
            secretName: {{ template "stolon.fullname" . }}
        - name: config
          configMap:
            name: {{ default  .Values.configFile.configMap .Values.configFile.existingConfigmap }}
        - name: ssh-secrets
          secret:
            secretName: {{ .Values.keeper.sshSecret }}
            defaultMode: 384

        {{- if eq .Values.role "standby"}}
        - name: passfile-secret
          secret:
            secretName: {{ .Values.standbyConfig.master.passfile.secretName }}
            defaultMode: 384
        {{- end }}

        - name: restore
          configMap:
            name: {{ .Values.keeper.restore.configmap }}
            defaultMode: 0700
{{- if not .Values.persistence.enabled }}
        - name: stolon-data
          emptyDir: {}
{{- else if .Values.persistence.hostpath }}
        - name: stolon-data
          hostPath:
            path: {{ .Values.persistence.hostpath }}{{ .Release.Name }}
            type: {{ .Values.persistence.hostpathType }}
{{- else }}
  volumeClaimTemplates:
    - metadata:
        name: stolon-data
      spec:
        accessModes:
          - {{ .Values.persistence.accessMode | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
  {{- if .Values.persistence.storageClassName }}
        storageClassName: {{ .Values.persistence.storageClassName | quote }}
    {{- else }}
        storageClassName: default
  {{- end }}
{{- end }}


